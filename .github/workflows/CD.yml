name: Node.js Typescript CD
on:
    push:
        branches:
            - dev
            - homolog
            - prod
jobs:
    DeployToAWS:
        environment:
            name: ${{ github.ref }}
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read
        steps:
            - uses: actions/checkout@v2
            - name: Setup AWS Credentials
              uses: aws-actions/configure-aws-credentials@v3
              with:
                role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GithubActionsRole
                role-session-name: github-action
                aws-region: sa-east-1
            - name: Use Node.js 18.x
              uses: actions/setup-node@v2
              with:
                node-version: 18.x
            - name: Setting stage and stack name
              run: |
                echo "STAGE=${{ github.ref_name }}"
                echo "STACK_NAME=CleanMssTsTemplate${{ github.ref_name }}" >> $GITHUB_ENV
            - name: Install dependencies
              run: |
                yarn add vite
                yarn global add aws-cdk
                yarn install -g
            - name: Build and Export
              run: |
                yarn build
            - name: Setup envs
              run: |
                echo AWS_REGION=sa-east-1 >> $GITHUB_ENV
                echo AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }} >> $GITHUB_ENV 
                echo STACK_NAME=${{ env.STACK_NAME }} >> $GITHUB_ENV
                echo GITHUB_REF_NAME=${{ github.ref_name }} >> $GITHUB_ENV
                echo DYNAMO_TABLE_NAME=${{ secrets.DYNAMO_TABLE_NAME }} >> $GITHUB_ENV
                echo ACM_CERTIFICATE_ARN=${{ secrets.DEVMAUA_ACM_CERTIFICATE_ARN }} >> $GITHUB_ENV
                echo HOSTED_ZONE_ID=${{ secrets.DEVMAUA_HOSTED_ONE_ID }} >> $GITHUB_ENV
                echo ALTERNATIVE_DOMAIN_NAME=${{ vars.ALTERNATIVE_DOMAIN_NAME }} >> $GITHUB_ENV
            - name: Deploy with CDK
              run: |
                cd iac
                cdk synth
                cdk deploy --require-approval never
            - name: Set CloudFront ID
              run: |
                CLOUD_FRONT_ID=$(aws cloudformation --region sa-east-1 describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='CleanMssTsTemplateDistributionId'${{github.ref_name}}].OutputValue" --output text)
                echo CLOUD_FRONT_ID=$CLOUD_FRONT_ID >> $GITHUB_ENV
            - name: Set AWS Bucket
              run: |
                AWS_BUCKET=$(aws cloudformation --region sa-east-1 describe-stacks) --stack-name ${{env.STACK_NAME}} --query "Stacks[0].Outputs[?OutputKey=='CleanMssTsTemplateBucketName'${{github.ref_name}}].OutputValue" --output text)
                echo AWS_BUCKET=$AWS_BUCKET >> $GITHUB_ENV
            - name: Upload to S3
              run: aws s3 cp dist s3://${{env.AWS_BUCKET}} --recursive --region sa-east-1
            - name: Clear CDN cache
              run: aws cloudfront create-invalidation --distribution-id ${{env.CLOUD_FRONT_ID}} --paths "/*" --region us-east-1